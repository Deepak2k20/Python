import pandas as pd
import random
from datetime import datetime, timedelta
import numpy as np

# --- Helper Functions (No Faker) ---

def generate_company_name():
    prefixes = ['Apex', 'Global', 'Starlight', 'Sunrise', 'Quantum', 'Keystone', 'Zenith', 'Pioneer']
    suffixes = ['Solutions', 'Industries', 'Ventures', 'Logistics', 'Group', 'Renewables', 'Farms']
    endings = ['Ltd.', 'Plc.', 'Inc.']
    return f"{random.choice(prefixes)} {random.choice(suffixes)} {random.choice(endings)}"

def generate_random_date(start_date, end_date):
    time_between_dates = end_date - start_date
    days_between_dates = time_between_dates.days
    random_number_of_days = random.randrange(days_between_dates)
    random_date = start_date + timedelta(days=random_number_of_days)
    return random_date.strftime('%Y-%m-%d')

# --- Configuration ---
NUM_RECORDS = 200
FILENAME = "dfi_fi_report_data_advanced.csv"

# --- Realistic Data Choices ---
DFI_FUNDERS = ['IFC', 'AfDB', 'Proparco', 'EIB', 'FMO', 'DEG', 'Internal']
ES_RISK_CATEGORIES = ['A', 'B', 'C', 'FI']
PROJECT_TYPES = ['Renewable Energy', 'Agriculture', 'SME Finance', 'Manufacturing', 'Infrastructure']

# --- Data Generation ---
data = []
end_date = datetime.now()
start_date = end_date - timedelta(days=5*365)

for i in range(NUM_RECORDS):
    es_category = random.choices(ES_RISK_CATEGORIES, weights=[0.10, 0.55, 0.25, 0.10], k=1)[0]
    project_type = random.choice(PROJECT_TYPES)
    
    # --- Generate Related Financial Risk Parameters ---
    # PD is influenced by E&S Risk. Higher risk category = higher base PD.
    if es_category == 'A':
        pd_base = random.uniform(0.04, 0.08) # 4%-8%
    elif es_category == 'B':
        pd_base = random.uniform(0.02, 0.04) # 2%-4%
    elif es_category == 'C':
        pd_base = random.uniform(0.005, 0.02) # 0.5%-2%
    else: # FI
        pd_base = random.uniform(0.01, 0.03)

    # LGD is the loss given default (e.g., 45% means 45% of the loan is lost)
    lgd = random.uniform(0.30, 0.65) # 30%-65%

    # EAD is the exposure at default, here modeled as a % of the original loan
    loan_amount = random.randint(500000, 20000000)
    ead = loan_amount * random.uniform(0.8, 1.0) # Assume 80-100% is outstanding

    # ECL is calculated from the other risk parameters
    ecl = pd_base * lgd * ead
    
    # --- Generate Impact Metrics ---
    # tCO2e reduction is high for renewables, moderate for others, zero for FIs
    if project_type == 'Renewable Energy':
        tco2e_reduction = random.randint(5000, 50000)
    elif project_type in ['Manufacturing', 'Agriculture']:
        tco2e_reduction = random.randint(100, 2000)
    else:
        tco2e_reduction = 0
        
    record = {
        'LoanID': f'DFI{2001 + i}',
        'BorrowerName': generate_company_name(),
        'ProjectType': project_type,
        'DFIFunder': random.choices(DFI_FUNDERS, weights=[0.2, 0.15, 0.1, 0.1, 0.05, 0.05, 0.35], k=1)[0],
        'LoanAmountUSD': loan_amount,
        'ES_RiskCategory': es_category,
        'PD_1yr': round(pd_base, 4),
        'LGD': round(lgd, 4),
        'EAD_USD': round(ead, 2),
        'ECL_USD': round(ecl, 2),
        'JobsSupported': random.randint(20, 800) if es_category != 'FI' else random.randint(500, 3000),
        'tCO2e_Reduction': tco2e_reduction,
    }
    data.append(record)

# --- Create DataFrame and Save to CSV ---
df = pd.DataFrame(data)
df = df[[
    'LoanID', 'BorrowerName', 'ProjectType', 'DFIFunder', 'LoanAmountUSD', 
    'ES_RiskCategory', 'PD_1yr', 'LGD', 'EAD_USD', 'ECL_USD', 
    'JobsSupported', 'tCO2e_Reduction'
]]
df.to_csv(FILENAME, index=False)

print(f"Successfully generated {NUM_RECORDS} records for the Advanced DFI & FI Report.")
print(f"File saved as: {FILENAME}")
print("\n--- Sample Data Head ---")
print(df.head())
