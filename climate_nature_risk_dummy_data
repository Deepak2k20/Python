import pandas as pd
import random
import numpy as np
from faker import Faker

# Initialize Faker
fake = Faker()

# --- Configuration ---
NUM_RECORDS = 500
FILENAME = "climate_nature_risk_report_data.csv"

# --- Realistic Data Choices & Logic ---
AFRICAN_COUNTRIES = [
    'Nigeria', 'Ghana', 'Kenya', 'Togo', 'Ivory Coast', 
    'South Africa', 'Uganda', 'Tanzania', 'Senegal', 'Cameroon'
]

# Map high-level sectors to risk profiles
INDUSTRY_SECTORS = {
    'Energy': {'gics': 'Energy', 'transition_risk': 'High'},
    'Materials': {'gics': 'Materials', 'transition_risk': 'High'},
    'Utilities': {'gics': 'Utilities', 'transition_risk': 'High'},
    'Industrials': {'gics': 'Industrials', 'transition_risk': 'Medium'},
    'Consumer Staples': {'gics': 'Food, Beverage & Tobacco', 'transition_risk': 'Medium'},
    'Agriculture': {'gics': 'Food & Staples Retailing', 'transition_risk': 'Medium'},
    'Information Technology': {'gics': 'Information Technology', 'transition_risk': 'Low'},
    'Financials': {'gics': 'Banks', 'transition_risk': 'Low'},
    'Renewables': {'gics': 'Independent Power & Renewable Electricity Producers', 'transition_risk': 'Low'}
}

# --- Data Generation ---
data = []
for i in range(NUM_RECORDS):
    sector_name = random.choice(list(INDUSTRY_SECTORS.keys()))
    sector_info = INDUSTRY_SECTORS[sector_name]
    
    transition_risk_level = sector_info['transition_risk']
    
    # Generate risk scores and emissions based on the sector's risk level
    if transition_risk_level == 'High':
        transition_score = random.choice([4, 5])
        ghg_emissions = np.random.randint(10000, 100000)
        climate_tag = 'High Transition Risk' if sector_name != 'Energy' else 'Fossil Fuel Exposure'
    elif transition_risk_level == 'Medium':
        transition_score = random.choice([2, 3])
        ghg_emissions = np.random.randint(500, 9000)
        climate_tag = 'Deforestation Risk' if sector_name == 'Agriculture' else 'Moderate Transition Risk'
    else: # Low
        transition_score = random.choice([1, 2])
        ghg_emissions = np.random.randint(50, 800)
        climate_tag = 'Green Loan' if sector_name == 'Renewables' else 'Low Transition Risk'
        
    record = {
        'LoanID': f'CR{7001 + i}',
        'BorrowerName': fake.company(),
        'Country': random.choice(AFRICAN_COUNTRIES),
        'IndustrySector_GICS': sector_info['gics'],
        'LoanAmountUSD': random.randint(1000000, 50000000),
        'GHG_Emissions_tCO2e': ghg_emissions,
        'PhysicalRiskScore': random.randint(1, 5), # Random, as it depends on location not sector
        'TransitionRiskScore': transition_score,
        'Asset_Latitude': fake.latitude(),
        'Asset_Longitude': fake.longitude(),
        'ClimateTag': climate_tag
    }
    data.append(record)

# --- Create DataFrame and Save to CSV ---
df_climate = pd.DataFrame(data)

# Reorder columns for clarity
df_climate = df_climate[[
    'LoanID', 'BorrowerName', 'Country', 'IndustrySector_GICS', 'LoanAmountUSD',
    'GHG_Emissions_tCO2e', 'PhysicalRiskScore', 'TransitionRiskScore',
    'Asset_Latitude', 'Asset_Longitude', 'ClimateTag'
]]

df_climate.to_csv(FILENAME, index=False)

print(f"\nSuccessfully generated {NUM_RECORDS} sample records for the Climate & Nature Risk Report.")
print(f"File saved as: {FILENAME}")
print("\n--- Sample Data Head ---")
print(df_climate.head())

