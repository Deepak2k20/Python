import pandas as pd
import random
import numpy as np

# --- Helper Functions (No Faker) ---

def generate_company_name():
    prefixes = ['Apex', 'Global', 'Volta', 'Sahara', 'Kalahari', 'Quantum', 'Nile', 'Congo Basin']
    suffixes = ['Resources', 'Energy', 'Materials', 'Farms', 'Power', 'Holdings', 'Exports']
    endings = ['Ltd.', 'Plc.', 'SA']
    return f"{random.choice(prefixes)} {random.choice(suffixes)} {random.choice(endings)}"

def generate_african_coords():
    lat = random.uniform(-35, 38)
    lon = random.uniform(-18, 52)
    return round(lat, 6), round(lon, 6)

# --- Configuration ---
NUM_RECORDS = 500
FILENAME = "climate_nature_risk_report_advanced.csv"

# --- Risk Profile Definitions ---
INDUSTRY_SECTORS = {
    'Energy': {'gics': 'Energy', 'transition_risk': 'High', 'base_pd': (0.05, 0.10)},
    'Materials': {'gics': 'Materials', 'transition_risk': 'High', 'base_pd': (0.04, 0.09)},
    'Utilities': {'gics': 'Utilities', 'transition_risk': 'High', 'base_pd': (0.03, 0.07)},
    'Industrials': {'gics': 'Industrials', 'transition_risk': 'Medium', 'base_pd': (0.02, 0.05)},
    'Agriculture': {'gics': 'Food & Staples Retailing', 'transition_risk': 'Medium', 'base_pd': (0.025, 0.06)},
    'Renewables': {'gics': 'Independent Power & Renewable Electricity Producers', 'transition_risk': 'Low', 'base_pd': (0.01, 0.03)},
    'Information Technology': {'gics': 'Information Technology', 'transition_risk': 'Low', 'base_pd': (0.005, 0.025)},
}

# --- Data Generation ---
data = []
for i in range(NUM_RECORDS):
    sector_name = random.choice(list(INDUSTRY_SECTORS.keys()))
    sector_info = INDUSTRY_SECTORS[sector_name]
    
    # --- Step 1: Generate Base Financials ---
    pd_range = sector_info['base_pd']
    base_pd = random.uniform(pd_range[0], pd_range[1])
    lgd = random.uniform(0.35, 0.70)
    loan_amount = random.randint(1000000, 50000000)
    ead = loan_amount * random.uniform(0.7, 1.0)
    base_ecl = base_pd * lgd * ead

    # --- Step 2: Generate Climate Risk Scores and Uplift Factor ---
    physical_risk_score = random.randint(1, 5)
    transition_risk_score = random.choice([4, 5]) if sector_info['transition_risk'] == 'High' else (random.choice([2, 3]) if sector_info['transition_risk'] == 'Medium' else random.choice([1, 2]))
    
    # Model a PD uplift based on climate scores. A score of 1 is baseline (no uplift).
    # This is a simplified model; a real one would be more complex.
    physical_uplift = (physical_risk_score - 1) * 0.08  # 8% uplift per score point
    transition_uplift = (transition_risk_score - 1) * 0.12 # 12% uplift per score point
    total_uplift_factor = physical_uplift + transition_uplift

    # --- Step 3: Calculate Climate-Adjusted Metrics ---
    climate_adjusted_pd = base_pd * (1 + total_uplift_factor)
    # Cap PD at a realistic maximum, e.g., 90%
    climate_adjusted_pd = min(climate_adjusted_pd, 0.90) 
    
    climate_adjusted_ecl = climate_adjusted_pd * lgd * ead
    climate_value_at_risk = climate_adjusted_ecl - base_ecl
    
    # --- Assemble Record ---
    lat, lon = generate_african_coords()
    record = {
        'LoanID': f'CR{8001 + i}',
        'BorrowerName': generate_company_name(),
        'IndustrySector_GICS': sector_info['gics'],
        'LoanAmountUSD': loan_amount,
        'EAD_USD': round(ead, 2),
        'PhysicalRiskScore': physical_risk_score,
        'TransitionRiskScore': transition_risk_score,
        'Base_PD': round(base_pd, 4),
        'Base_ECL_USD': round(base_ecl, 2),
        'ClimateAdjusted_PD': round(climate_adjusted_pd, 4),
        'ClimateAdjusted_ECL_USD': round(climate_adjusted_ecl, 2),
        'Climate_Value_at_Risk_USD': round(climate_value_at_risk, 2),
        'Asset_Latitude': lat,
        'Asset_Longitude': lon,
    }
    data.append(record)

# --- Create DataFrame and Save to CSV ---
df_climate = pd.DataFrame(data)
df_climate = df_climate[[
    'LoanID', 'BorrowerName', 'IndustrySector_GICS', 'LoanAmountUSD', 'EAD_USD',
    'PhysicalRiskScore', 'TransitionRiskScore',
    'Base_PD', 'ClimateAdjusted_PD',
    'Base_ECL_USD', 'ClimateAdjusted_ECL_USD', 'Climate_Value_at_Risk_USD',
    'Asset_Latitude', 'Asset_Longitude'
]]
df_climate.to_csv(FILENAME, index=False)

print(f"\nSuccessfully generated {NUM_RECORDS} records for the Advanced Climate Risk Report.")
print(f"File saved as: {FILENAME}")
print("\n--- Sample Data Head ---")
print(df_climate.head())
